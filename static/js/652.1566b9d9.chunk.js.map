{"version":3,"file":"static/js/652.1566b9d9.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactsList.module.css?c071","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.filter.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formInput\":\"ContactForm_formInput__GszVU\",\"formButton\":\"ContactForm_formButton__TN6Jq\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\nimport css from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    const nameExists = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (nameExists) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContact(contact));\n    }\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.formLabel}>Name </label>\n      <input\n        className={css.formInput}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        placeholder=\"Name\"\n        onChange={handleChange}\n        value={name}\n      />\n      <label className={css.formLabel}>Number </label>\n      <input\n        className={css.formInput}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        placeholder=\"111-11-11\"\n        onChange={handleChange}\n        value={number}\n      />\n      <button className={css.formButton} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ContactsList_contact__QYeYb\",\"btn\":\"ContactsList_btn__o33vN\"};","import css from './ContactsList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const findContacts = () => {\n    const normalizedFilter = filter ? filter.toLowerCase() : '';\n\n    if (!contacts) {\n      return [];\n    }\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n  const filteredContacts = findContacts();\n\n  return (\n    <ul>\n      {filteredContacts.map(({ id, name, number }) => {\n        return (\n          <li className={css.contact} key={id}>\n            <p>\n              {name}: {number}\n            </p>\n            <button\n              className={css.btn}\n              onClick={() => dispatch(deleteContact(id))}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formInput\":\"Filter_formInput__XNLZn\",\"filterLabel\":\"Filter_filterLabel__+pnW-\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filter';\nimport { getFilter } from 'redux/contacts/selectors';\n\nimport css from './Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const handleChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div>\n      <label className={css.filterLabel}>Find contacts by Name </label>\n      <input\n        className={css.formInput}\n        type=\"text\"\n        placeholder=\"Enter filter\"\n        name=\"filter\"\n        onChange={handleChange}\n        value={filter}\n      />\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { selectIsLoggedIn } from 'redux/auth/authSelectors';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoggedIn);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","getContacts","state","contacts","items","getFilter","filter","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","event","target","value","className","css","onSubmit","preventDefault","contact","nameExists","some","toLowerCase","alert","addContact","type","pattern","title","required","placeholder","onChange","ContactList","useEffect","fetchContacts","filteredContacts","normalizedFilter","includes","findContacts","map","onClick","deleteContact","Filter","e","setFilter","Contacts","isLoading","selectIsLoggedIn","Helmet"],"sourceRoot":""}